apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "geoserver.fullname" . }}-config-configs
  labels:
    {{- include "geoserver.labels" . | nindent 4 }}
    app.kubernetes.io/component: "config"
data:
  application.yml: |
    server:
      tomcat:
        # Maximum number of connections that the server accepts and processes at any given time.
        # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
        max-connections: 1000 # default: 8192
        # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
        accept-count: 100 # default: 100
        accesslog:
          enabled: false
          directory: logs
          encoding: UTF-8
        threads:
          # Minimum amount of worker threads.
          min-spare: 2 #default: 10
          # Maximum amount of worker threads.
          max: 20 #default: 200

    # Common configuration for all services. Override or add service specific config
    # properties on each <service-name>-service.yml file
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
        # enable caching if using the catalog-service as backend
        caching.enabled: ${geoserver.backend.catalog-service.enabled}
      bus:
        # whether to send distributed events (i.e. acts as master). All instances receive remote events.
        send-events: true
        # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false,
        # not all possible payload types are properly tested, and full object payload is not needed.
        send-object: ${geoserver.backend.data-directory.enabled}
        # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.
        send-diff: ${geoserver.backend.data-directory.enabled}
      backend:
        # configure catalog backends and decide which backend to use on this service.
        # All backends are disabled, enable the required one on each service. For example, the catalog microservice
        # will enable one backend type, and the front services the catalog-service backend.
        # revisit: Could be split into profiles
        catalog-service:
          enabled: ${backend.catalog:false}
          # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for "catalog-service"
          # This allows to explicitly set a fixed location for the catalog service.
          # uri: http://catalog:8080
          cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store
          fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store
        data-directory:
          enabled: ${backend.data-directory:false}
          location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory}
        jdbcconfig:
          enabled: ${backend.jdbcconfig:false}
          initdb: true
          web.enabled: true
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}
          datasource:
            url: "${jdbcconfig.url:jdbc:postgresql://${jdbcconfig.host}:${jdbcconfig.port:5432}/${jdbcconfig.database}?currentSchema=${jdbcconfig.schema:public}}"
            username: ${jdbcconfig.username:geoserver}
            password: ${jdbcconfig.password:geo5erver}

            driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
            # optional:
            minimumIdle: ${jdbcconfig.minConnections:2}
            maximumPoolSize: ${jdbcconfig.maxConnections:8}

    # GeoTools HTTP Client proxy configuration, allows configuring cascaded WMS/WMTS/WFS stores
    # that need to go through an HTTP proxy without affecting all the http clients at the JVM level
    # These are default settings. The enabled property can be set to false to disable the custom
    # HTTPClientFactory altogether.
    # The following OS environment variables can be set for easier configuration:
    # HTTP(S)_PROXYHOST, HTTP(S)_PROXYPORT, HTTP(S)_PROXYUSER, HTTP(S)_PROXYPASSWORD, HTTP(S)_NONPROXYHOSTS
    geotools:
      httpclient:
        proxy:
          enabled: true
          http:
            host: ${http.proxyHost:}
            port: ${http.proxyPort:}
            user: ${http.proxyUser:}
            password: ${http.proxyPassword:}
            nonProxyHosts: ${http.nonProxyHosts:localhost.*}
            # comma separated list of Java regular expressions, e.g.: nonProxyHosts: localhost, example.*
          https:
            host: ${https.proxyHost:${geotools.httpclient.proxy.http.host}}
            port: ${https.proxyPort:${geotools.httpclient.proxy.http.port}}
            user: ${https.proxyUser:${geotools.httpclient.proxy.http.user}}
            password: ${https.proxyPassword:${geotools.httpclient.proxy.http.password}}
            nonProxyHosts: ${https.nonProxyHosts:${geotools.httpclient.proxy.http.nonProxyHosts}}

    management:
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"
      endpoint:
        info.enabled: true
        metrics.enabled: true
        shutdown.enabled: true
        health:
          enabled: true
          show-details: always
      metrics:
        binders:
          processor.enabled: true
          uptime.enabled: true
          jvm.enabled: true
        enable.all: true
        enable.jvm: true
        export:
          atlas.enabled: false

    spring:
      rabbitmq: {{ include "geoserver.spring.rabbitmq" . | nindent 8 }}
      cloud:
        bus:
          enabled: true
          id: ${info.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: false #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog
      jackson:
        default-property-inclusion: non-empty
        serialization.indent-output: false #set to true if doing manual testing and want formatted output

    reactive.feign.cloud.enabled: true
    reactive.feign.hystrix.enabled: false

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.springframework.retry: info
        # geoserver roots
        org.geoserver: INFO
        org.geoserver.catalog.plugin: INFO
        org.geoserver.wms: WARN #don't flood the logs with every request details
        org.geoserver.wfs: WARN
        org.geoserver.jackson: INFO
        org.geotools.jackson: INFO
        org.geoserver.platform: INFO
        org.geoserver.platform.resource: INFO
        org.geoserver.jdbcconfig: INFO
        oshi.hardware.platform.linux: ERROR
        oshi.software.os: ERROR
        # gs-cloud roots
        org.geoserver.cloud: INFO
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.cloud.config.factory: INFO
        # bus debugging
        org.geoserver.cloud.bus: INFO
        org.springframework.cloud.bus.BusAutoConfiguration: INFO
        org.springframework.cloud.bus.DefaultBusPathMatcher: INFO
        # reactivefeign:
        reactivefeign.client.log: INFO
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN

    ---
    spring.config.activate.on-profile: datadir
    backend.jdbcconfig: false
    backend.catalog: false
    backend.data-directory: true
    ---
    spring.config.activate.on-profile: jdbcconfig
    backend.jdbcconfig: true
    backend.catalog: false
    backend.data-directory: false
    ---
    spring.config.activate.on-profile: catalog
    backend.catalog: true
    backend.jdbcconfig: false
    backend.data-directory: false
    ---
    spring.config.activate.on-profile: debug

    logging:
      level:
        root: WARN
        org.springframework: INFO
        # geoserver roots
        org.geoserver: INFO
        org.geoserver.catalog.plugin: DEBUG
        org.geoserver.wms: WARN
        org.geoserver.wfs: WARN
        org.geoserver.jackson: DEBUG
        org.geotools.jackson: DEBUG
        org.geoserver.platform: ERROR
        org.geoserver.jdbcconfig: INFO
        # gs-cloud roots
        org.geoserver.cloud: DEBUG
        org.geoserver.cloud.autoconfigure: DEBUG
        org.geoserver.cloud.config.factory: DEBUG
        # bus debugging
        org.geoserver.cloud.bus: TRACE
        org.springframework.cloud.bus: DEBUG
        org.springframework.cloud.bus.BusAutoConfiguration: DEBUG
        org.springframework.cloud.bus.DefaultBusPathMatcher: INFO
        # reactivefeign:
        reactivefeign.client.log: DEBUG

  config-service.yml: |
    spring:
      profiles:
        active: native #use native filesystem config by default instead of git. REVISIT.
      config.server.native.searchLocations: ${config.path:file:./config}

    logging:
      level:
        root: WARN
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN



  gateway-service.yml: |
    # Defines the root base path at which the gateway exposes all geoserver request paths
    # We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't
    # work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759
    # For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served
    # under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)
    # Examples:
    #geoserver.base-path:
    #geoserver.base-path: /geoserver-cloud
    #geoserver.base-path: /geoserver/cloud
    # Leave it empty for no additional path, setting it to / won't work currently
    #
    # Please note any other prefix than the empty string will require a trailing slash in the root URL
    # for the redirection to the web-ui to work. This is something we need to fix. For example:
    # http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.
    geoserver.base-path: {{ if not (hasSuffix "/" .Values.geoserver.ingress.baseUrl) }} {{ .Values.geoserver.ingress.baseUrl }} {{else}} {{ trimSuffix "/" .Values.geoserver.ingress.baseUrl }} {{ end }}

    # Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
    server:
      compression:
        enabled: true

    management:
      endpoint.gateway.enabled: true # default value
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"

    spring:
      cloud:
        gateway:
          {{- if eq .Values.global.cors.enabled true }}
          globalcors:
            cors-configurations:
              '[/**]':
                allowedOrigins: "*"
                allowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - OPTIONS
                - HEAD
          {{- end }}
          default-filters:
          - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests
          actuator:
            verbose:
              enabled: true
          routes:
          - id: catalog
            uri: lb://catalog-service
            predicates:
            - Path=${geoserver.base-path}/api/v1/**
            filters: # Expose the catalog and configuration API only if the dev profile is active
            - RouteProfile=dev,403
    # WFS routes
          - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
            uri: lb://wfs-service #load balanced to the wfs-service instances
            predicates:
            - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**
    # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
          - id: wfs_ows
            uri: lb://wfs-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
    # WMS routes
          - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
            uri: lb://wms-service #load balanced to the wms-service instances
            predicates:
            - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**
          - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
            uri: lb://wms-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
    # WCS routes
          - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
            uri: lb://wcs-service #load balanced to the wps-service instances
            predicates:
            - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**
          - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
            uri: lb://wcs-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
    # WPS routes
          - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
            uri: lb://wps-service #load balanced to the wps-service instances
            predicates:
            - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**
          - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
            uri: lb://wps-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively
    # REST configuration routes
          - id: restconfig
            uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances
            predicates:
            - Path=${geoserver.base-path}/rest/**
    # Web UI configuration routes
          - id: webui
            uri: lb://web-ui
            predicates:
            - Path=${geoserver.base-path}/**
            #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout

    logging:
      level:
        root: WARN
        com.netflix.discovery: INFO
        com.netflix.eureka: INFO
        org.springframework.cloud.gateway: info
        reactor.netty: INFO




  web-ui.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
      web-ui:
        file-browser.hide-file-system: true
        # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure
        security.enabled: true
        wfs.enabled: true
        wms.enabled: true
        wcs.enabled: true
        wps.enabled: false # not working yet
        gwc.enabled: false # not ready yet
        extensions:
          importer.enabled: true
        demos:
          enabled: true
          wps-request-builder: true
          wcs-request-builder: true
          demo-requests: true
          srs-list: true
          reprojection-console: true
          layer-preview-page:
            enabled: true
            common-formats:
              open-layers: true
              gml: true
              kml: false #kml links are broken
        tools:
          enabled: true
          resource-browser: true
          catalog-bulk-load: true

  restconfig-v1.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}

  wfs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}

  wms-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}

  wcs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
