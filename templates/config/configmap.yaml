apiVersion: v1
data:
  config-service.yml: |
    # Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
    # See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
    eureka.client.healthcheck.enabled: false
  gateway-service.yml: |
    # Defines the root base path at which the gateway exposes all geoserver request paths
    # We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't
    # work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759
    # For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served
    # under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)
    # Examples:
    #geoserver.base-path:
    #geoserver.base-path: /geoserver-cloud
    #geoserver.base-path: /geoserver/cloud
    # Leave it empty for no additional path, setting it to / won't work currently
    #
    # Please note any other prefix than the empty string will require a trailing slash in the root URL
    # for the redirection to the web-ui to work. This is something we need to fix. For example:
    # http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.
    geoserver.base-path: ${geoserver_base_path:}

    # by default, assumes a discovery-client is in use, and perform client-side load balancing on
    # the advertised instances. See the 'static_routes' profile notes for a static config
    targets:
      catalog: lb://catalog-service
      wfs: lb://wfs-service
      wms: lb://wms-service
      wcs: lb://wcs-service
      wps: lb://wps-service
      rest: lb://restconfig-v1
      gwc: lb://gwc-service
      webui: lb://web-ui

    # Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
    server:
      compression:
        enabled: true

    spring:
      cloud:
        gateway:
          globalcors:
            cors-configurations:
              "[/**]":
                allowedOrigins: "*"
                allowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - OPTIONS
                  - HEAD
          default-filters:
            - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests
          actuator:
            verbose:
              enabled: true
          routes:
            - id: catalog
              uri: ${targets.catalog}
              predicates:
                - Path=${geoserver.base-path}/api/v1/**
              filters: # Expose the catalog and configuration API only if the dev profile is active
                - RouteProfile=dev,403
            # WFS routes
            - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
              uri: ${targets.wfs}
              predicates:
                - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**
            # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
            - id: wfs_ows
              uri: ${targets.wfs}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
            # WMS routes
            - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
              uri: ${targets.wms}
              predicates:
                - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**
            - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
              uri: ${targets.wms}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
            # WCS routes
            - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
              uri: ${targets.wcs}
              predicates:
                - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**
            - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
              uri: ${targets.wcs}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
            # WPS routes
            - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
              uri: ${targets.wps}
              predicates:
                - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**
            - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
              uri: ${targets.wps}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows
                - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively
            # REST configuration routes
            - id: restconfig
              uri: ${targets.rest}
              predicates:
                - Path=${geoserver.base-path}/rest/**
            # GeoWebcache configuration routes
            - id: gwc
              uri: ${targets.gwc}
              predicates:
                - Path=${geoserver.base-path}/gwc/**
            # Web UI configuration routes
            - id: webui
              uri: ${targets.webui}
              predicates:
                - Path=${geoserver.base-path}/**
              #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout

    management:
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"
      endpoint:
        info.enabled: true
        metrics.enabled: true
        shutdown.enabled: true
        health:
          enabled: true
          show-details: always
      metrics:
        binders:
          processor.enabled: true
          uptime.enabled: true
          jvm.enabled: true
        enable.all: true
        enable.jvm: true
        export:
          atlas.enabled: false

    ---
    # this profile is automatically included if any of the embedded
    # config_first or discovery_first profile groups are active
    spring.config.activate.on-profile: discovery_eureka
    # Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
    # See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
    eureka.client.healthcheck.enabled: true
    eureka.server.url: http://discovery:8761/eureka
    ---
    spring.config.activate.on-profile: standalone
    # Define static targets using known host names.
    # Host names can be docker-compose assigned service names, or k8s service names as appropriate
    targets:
      catalog: http://catalog:8080
      wfs: http://wfs:8080
      wms: http://wms:8080
      wcs: http://wcs:8080
      wps: http://wps:8080
      rest: http://rest:8080
      gwc: http://gwc:8080
      webui: http://webui:8080
    ---
    spring.config.activate.on-profile: local
    targets:
      catalog: http://localhost:9100
      wfs: http://localhost:9101
      wms: http://localhost:9102
      wcs: http://localhost:9103
      wps: http://localhost:9104
      rest: http://localhost:9105
      webui: http://localhost:9106
      gwc: http://localhost:9107
  geoserver.yml: |
    # shared application config for geoserver-cloud v1.0-SNAPSHOT
    server:
      tomcat:
        # Maximum number of connections that the server accepts and processes at any given time.
        # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
        max-connections: 1000 # default: 8192
        # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
        accept-count: 100 # default: 100
        accesslog:
          enabled: false
          directory: logs
          encoding: UTF-8
        threads:
          # Minimum amount of worker threads.
          min-spare: 2 #default: 10
          # Maximum amount of worker threads.
          max: 20 #default: 200

    management:
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"
      endpoint:
        info.enabled: true
        metrics.enabled: true
        shutdown.enabled: true
        health:
          enabled: true
          probes.enabled: true
          show-details: always
      metrics:
        binders:
          processor.enabled: true
          uptime.enabled: true
          jvm.enabled: true
        enable.all: true
        enable.jvm: true
        export:
          atlas.enabled: false

    spring:
      rabbitmq:
        host: ${rabbitmq.host:rabbitmq}
        port: ${rabbitmq.port:5672}
        username: ${rabbitmq.user:guest}
        password: ${rabbitmq.password:guest}
      cloud:
        bus:
          enabled: true
          id: ${info.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: false #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog
      jackson:
        default-property-inclusion: non-empty
        serialization.indent-output: false #set to true if doing manual testing and want formatted output

    reactive.feign.cloud.enabled: true
    reactive.feign.hystrix.enabled: false

    # Common configuration for all services. Override or add service specific config
    # properties on each <service-name>-service.yml file

    # GeoTools HTTP Client proxy configuration, allows configuring cascaded WMS/WMTS/WFS stores
    # that need to go through an HTTP proxy without affecting all the http clients at the JVM level
    # These are default settings. The enabled property can be set to false to disable the custom
    # HTTPClientFactory altogether.
    # The following OS environment variables can be set for easier configuration:
    # HTTP(S)_PROXYHOST, HTTP(S)_PROXYPORT, HTTP(S)_PROXYUSER, HTTP(S)_PROXYPASSWORD, HTTP(S)_NONPROXYHOSTS
    geotools:
      httpclient:
        proxy:
          enabled: true
          http:
            host: ${http.proxyHost:}
            port: ${http.proxyPort:}
            user: ${http.proxyUser:}
            password: ${http.proxyPassword:}
            nonProxyHosts: ${http.nonProxyHosts:localhost.*}
            # comma separated list of Java regular expressions, e.g.: nonProxyHosts: localhost, example.*
          https:
            host: ${https.proxyHost:${geotools.httpclient.proxy.http.host}}
            port: ${https.proxyPort:${geotools.httpclient.proxy.http.port}}
            user: ${https.proxyUser:${geotools.httpclient.proxy.http.user}}
            password: ${https.proxyPassword:${geotools.httpclient.proxy.http.password}}
            nonProxyHosts: ${https.nonProxyHosts:${geotools.httpclient.proxy.http.nonProxyHosts}}

    gwc:
      enabled: true
      cache-directory: ${GEOWEBCACHE_CACHE_DIR:${geoserver.backend.data-directory.location}/gwc}
      rest-config: true
      web-ui: true
      services:
        wmts: true
        tms: true
        wms: true
        kml: true
        gmaps: true
        mgmaps: true
      blobstores:
        azure: true
        s3: true

    # GeoServer-Cloud common config properties
    geoserver:
      security:
        enabled: true
        authkey: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
        # enable caching if using the catalog-service as backend
        caching.enabled: ${geoserver.backend.catalog-service.enabled}
      bus:
        # whether to send distributed events (i.e. acts as master). All instances receive remote events.
        send-events: true
        # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false,
        # not all possible payload types are properly tested, and full object payload is not needed.
        send-object: ${geoserver.backend.data-directory.enabled}
        # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.
        send-diff: ${geoserver.backend.data-directory.enabled}
      backend:
        # configure catalog backends and decide which backend to use on this service.
        # All backends are disabled, enable the required one on each service. For example, the catalog microservice
        # will enable one backend type, and the front services the catalog-service backend.
        # revisit: Could be split into profiles
        catalog-service:
          enabled: ${backend.catalog:false}
          # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for "catalog-service"
          # This allows to explicitly set a fixed location for the catalog service.
          # uri: http://catalog:8080
          cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store
          fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store
        data-directory:
          enabled: ${backend.data-directory:false}
          location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory}
        jdbcconfig:
          enabled: ${backend.jdbcconfig:false}
          initdb: true
          web.enabled: true
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}
          datasource:
            url: "${jdbcconfig.url:jdbc:postgresql://${jdbcconfig.host:database}:${jdbcconfig.port:5432}/${jdbcconfig.database:geoserver_config}?currentSchema=${jdbcconfig.schema:public}}"
            username: ${jdbcconfig.username:geoserver}
            password: ${jdbcconfig.password:geo5erver}
            driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
            # optional:
            minimumIdle: ${jdbcconfig.minConnections:2}
            maximumPoolSize: ${jdbcconfig.maxConnections:8}
      styling:
        css.enabled: true
        mapbox.enabled: true
      wms:
        output-formats:
          vector-tiles:
            mapbox.enabled: true
            geojson.enabled: true
            topojson.enabled: true

    logging:
      level:
        root: warn
        org.springframework: warn
        org.springframework.cloud.bus: info
        org.springframework.retry: info
        org.springframework.jdbc.support: info
        com.zaxxer.hikari.pool: OFF
        # reactivefeign:
        reactivefeign.client.log: info
    #    com.netflix.eureka.registry.AbstractInstanceRegistry: error # log flooding with "WARN No remote registry available for the remote region us-east-1"
    #    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: error # log flooding with "WARN No remote registry available for the remote region us-east-1"
        # geoserver roots
        org.geotools.autoconfigure: info
        oshi.hardware.platform.linux: error
        oshi.software.os: error
        org.geoserver: warn
        org.geoserver.catalog.plugin: info
        org.geoserver.jackson: info
        org.geotools.jackson: info
        org.geoserver.platform: error
        org.geoserver.platform.resource.MemoryLockProvider: info
        org.geoserver.platform.resource.NioFileLockProvider: info
        org.geoserver.platform.resource.FileLockProvider: info
        org.geoserver.jdbcconfig: info
        # gs-cloud roots
        org.geoserver.cloud: info
        org.geoserver.cloud.autoconfigure: info
        org.geoserver.cloud.config.factory: info
        # bus debugging
        org.geoserver.cloud.bus: info
        org.springframework.cloud.bus.BusAutoConfiguration: info
        org.springframework.cloud.bus.DefaultBusPathMatcher: info
    ---
    # this profile is automatically included if any of the embedded
    # config_first or discovery_first profile groups are active
    spring.config.activate.on-profile: discovery_eureka
    # Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
    # See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
    eureka.client.healthcheck.enabled: true
    eureka.server.url: http://discovery:8761/eureka

    ###################################################
    #### GeoServer configuration backend profiles: ####
    ---
    spring.config.activate.on-profile: datadir
    backend.jdbcconfig: false
    backend.catalog: false
    backend.data-directory: true

    ---
    spring.config.activate.on-profile: jdbcconfig
    backend.jdbcconfig: true
    backend.catalog: false
    backend.data-directory: false

    ---
    spring.config.activate.on-profile: catalog
    backend.catalog: true
    backend.jdbcconfig: false
    backend.data-directory: false

    #############################################
    #### per microservice-specific profiles: ####
    ---
    spring.config.activate.on-profile: catalog_service
    geoserver:
      security.enabled: false
      # Disable advertised catalog, it checks the org.geoserver.ows.Dispatcher.REQUEST to check if an OWS is in progress,
      # which can never be the case, and causes a java.lang.NoClassDefFoundError on org.springframework.web.servlet.mvc.AbstractController
      catalog:
        advertised: false
        # Disable LocalWorkspaceCatalog decorator, this service exposes a "raw catalog" backend, there's no concept of local workspaces
        localWorkspace: false
        secure: false
        # enable caching while using the jdbcconfig backend, we've disabled its own internal caching due to concurrency related bugs
        caching.enabled: ${geoserver.backend.jdbcconfig.enabled}
      catalog-service:
        io-threads:
          # Number of back-end threads to hit the actual catalog with. Defaults 4 * number of cores if unset.
          # If using jdbcconfig, let io-threads be about half the size of geoserver.backend.jdbcconfig.datasource.maximumPoolSize,
          # it has the tendency to use more than one jdbc connection for some requests.
          max-size: ${catalog.io.threads:8}
          # maximum number of queued requests per worker thread before rejecting new requests
          max-queued: ${catalog.io.maxQueued:10000}
      bus:
        # receive events but don't publish, it's the front catalogs that publish events to better track where the changes come from
        send-events: false
      backend:
        # decide which catalog backend to use on this service, default to using jdbcconfig
        jdbcconfig.enabled: ${backend.jdbcconfig:true}

    ---
    spring.config.activate.on-profile: wfs_service
    ---
    spring.config.activate.on-profile: wms_service
    ---
    spring.config.activate.on-profile: wcs_service
    ---
    spring.config.activate.on-profile: wps_service
    ---
    spring.config.activate.on-profile: restconfig_service
    ---
    spring.config.activate.on-profile: webui_service
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
      web-ui:
        file-browser.hide-file-system: true
        # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure
        security.enabled: true
        wfs.enabled: true
        wms.enabled: true
        wcs.enabled: true
        wps.enabled: false # not working yet
        gwc:
          enabled: ${gwc.enabled:false}
          capabilities:
            tms: ${gwc.services.tms:false}
            wmts: ${gwc.services.wmts:false}
            wmsc: ${gwc.services.wms:false}
        extensions:
          importer.enabled: true
          geostyler.enabled: true
        demos:
          enabled: true
          wps-request-builder: true
          wcs-request-builder: true
          demo-requests: true
          srs-list: true
          reprojection-console: true
          layer-preview-page:
            enabled: true
            common-formats:
              open-layers: true
              gml: true
              kml: false #kml links are broken
        tools:
          enabled: true
          resource-browser: true
          catalog-bulk-load: true
    ---
    spring.config.activate.on-profile: gwc_service
    ---
    spring.config.activate.on-profile: debug
    logging:
      level:
        root: info
        org.springframework: info
        # geoserver roots
        org.geoserver: info
        org.geoserver.catalog.plugin: debug
        org.geoserver.wms: info
        org.geoserver.wfs: info
        org.geoserver.jackson: debug
        org.geotools.jackson: debug
        org.geoserver.platform: error
        org.geoserver.platform.resource.MemoryLockProvider: info
        org.geoserver.platform.resource.NioFileLockProvider: debug
        org.geoserver.platform.resource.FileLockProvider: debug
        org.geoserver.jdbcconfig: info
        # gs-cloud roots
        org.geoserver.cloud: debug
        org.geoserver.cloud.autoconfigure: trace
        org.geoserver.cloud.config.factory: trace
        org.geoserver.cloud.gwc: debug
        # bus debugging
        org.geoserver.cloud.bus: trace
        org.springframework.cloud.bus: debug
        org.springframework.cloud.bus.BusAutoConfiguration: info
        org.springframework.cloud.bus.DefaultBusPathMatcher: info
        # reactivefeign:
        reactivefeign.client.log: info
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: {{ include "geoserver.fullname" . }}-config-configs
  labels:
    {{- include "geoserver.labels" . | nindent 4 }}
    app.kubernetes.io/component: "config"

