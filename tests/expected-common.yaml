---
# Source: examples-common/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gs-cloud-common-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: gs-cloud-common-rabbitmq
---
# Source: examples-common/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gs-cloud-common-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IGdlb3NlcnZlcgojIyBDbHVzdGVyaW5nCiMjCmNsdXN0ZXJfZm9ybWF0aW9uLnBlZXJfZGlzY292ZXJ5X2JhY2tlbmQgID0gcmFiYml0X3BlZXJfZGlzY292ZXJ5X2s4cwpjbHVzdGVyX2Zvcm1hdGlvbi5rOHMuaG9zdCA9IGt1YmVybmV0ZXMuZGVmYXVsdApjbHVzdGVyX2Zvcm1hdGlvbi5ub2RlX2NsZWFudXAuaW50ZXJ2YWwgPSAxMApjbHVzdGVyX2Zvcm1hdGlvbi5ub2RlX2NsZWFudXAub25seV9sb2dfd2FybmluZyA9IHRydWUKY2x1c3Rlcl9wYXJ0aXRpb25faGFuZGxpbmcgPSBhdXRvaGVhbAojIHF1ZXVlIG1hc3RlciBsb2NhdG9yCnF1ZXVlX21hc3Rlcl9sb2NhdG9yID0gbWluLW1hc3RlcnMKIyBlbmFibGUgZ3Vlc3QgdXNlcgpsb29wYmFja191c2Vycy5ndWVzdCA9IGZhbHNlCiNkZWZhdWx0X3Zob3N0ID0gZGVmYXVsdC12aG9zdAojZGlza19mcmVlX2xpbWl0LmFic29sdXRlID0gNTBNQg==
---
# Source: examples-common/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gs-cloud-common-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "SW9USlR0dXhteTdXdU00NA=="

  rabbitmq-erlang-cookie: "NnFTNnBoWVBzbFdjUU5FNmZhZFNKVzhSbTlBY0Jvazg="
---
# Source: examples-common/templates/cm_db_jndi.yaml
# NB: this suppose that a docker postgis container
# is running on the host, and that its gateway
# is 172.17.0.1
apiVersion: v1
data:
  jndi.yml: |+
    jndi:
      datasources:
        geodata:
          enabled: true
          wait-for-it: true
          wait-timeout: 10
          url: jdbc:postgresql://172.17.0.1:5432/ogscloud
          username: username
          password: password
          maximum-pool-size: 10
          minimum-idle: 2
          connection-timeout: 250
          idle-timeout: 60000
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: cm-jndi-geodata
---
# Source: examples-common/templates/pv_pvc.yaml
# PV cache
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gs-cloud-gwc-cache-nfs
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 10Gi
  mountOptions:
    - nfsvers=4.1
  nfs:
    path: /nfs/tiles
    server: not-set
  persistentVolumeReclaimPolicy: Retain
---
# Source: examples-common/templates/pv_pvc.yaml
# PV config
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gs-cloud-datadir-nfs
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 10Gi
  mountOptions:
    - nfsvers=4.1
  nfs:
    path: /nfs/datadir
    server: not-set
  persistentVolumeReclaimPolicy: Retain
---
# Source: examples-common/templates/pv_pvc.yaml
# PV raster
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gs-cloud-raster-nfs
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 10Gi
  mountOptions:
    - nfsvers=4.1
  nfs:
    path: /nfs/raster
    server: not-set
  persistentVolumeReclaimPolicy: Retain
---
# Source: examples-common/templates/pv_pvc.yaml
# PVC cache-claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gs-cloud-gwc-cache-nfs-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: gs-cloud-gwc-cache-nfs
  storageClassName: ""
---
# Source: examples-common/templates/pv_pvc.yaml
# PVC config-claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gs-cloud-datadir-nfs-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: gs-cloud-datadir-nfs
  storageClassName: ""
---
# Source: examples-common/templates/pv_pvc.yaml
# PVC raster-claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gs-cloud-raster-nfs-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: gs-cloud-raster-nfs
  storageClassName: ""
---
# Source: examples-common/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gs-cloud-common-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: examples-common/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gs-cloud-common-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: gs-cloud-common-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gs-cloud-common-rabbitmq-endpoint-reader
---
# Source: examples-common/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-common-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: gs-cloud-common
  publishNotReadyAddresses: true
---
# Source: examples-common/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-common-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: gs-cloud-common
---
# Source: examples-common/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gs-cloud-common-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: gs-cloud-common
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: gs-cloud-common-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: gs-cloud-common
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-11.3.0
        app.kubernetes.io/instance: gs-cloud-common
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: fc0b91f081a2da0a894a7149dd689d8172b001c909cc4ddd69dc0756d5a23efe
        checksum/secret: 79f631c7e6949aed4adfe2fd226d541a50efcc4db408c767dafdd8bc308dda36
    spec:

      serviceAccountName: gs-cloud-common-rabbitmq
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: gs-cloud-common
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.13-debian-10-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: gs-cloud-common-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: gs-cloud-common-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "geoserver"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gs-cloud-common-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          projected:
            sources:
              - secret:
                  name: gs-cloud-common-rabbitmq-config
        - name: data
          emptyDir: {}
