---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-gateway
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gateway
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: gateway
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-gwc
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gwc
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: gwc
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-rest
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: rest
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: rest
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-wcs
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wcs
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: wcs
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-webui
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: webui
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: webui
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-wfs
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wfs
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: wfs
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-statefulset-gsc-wms
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wms
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: wms
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gs-cloud-statefulset-geoserver
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: main
data:
  CHART_NAME: geoserver
  RELEASE_NAME: gs-cloud-statefulset
  RELEASE_NAMESPACE: default
  SERVICE_ACL_NAME: gs-cloud-statefulset-gsc-acl
  SERVICE_ACL_CONTAINER_SPRING_IMAGE_TAG: "2.0.1"
  SERVICE_GATEWAY_NAME: gs-cloud-statefulset-gsc-gateway
  SERVICE_GATEWAY_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_GWC_NAME: gs-cloud-statefulset-gsc-gwc
  SERVICE_GWC_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_REST_NAME: gs-cloud-statefulset-gsc-rest
  SERVICE_REST_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_WCS_NAME: gs-cloud-statefulset-gsc-wcs
  SERVICE_WCS_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_WEBUI_NAME: gs-cloud-statefulset-gsc-webui
  SERVICE_WEBUI_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_WFS_NAME: gs-cloud-statefulset-gsc-wfs
  SERVICE_WFS_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_WMS_NAME: gs-cloud-statefulset-gsc-wms
  SERVICE_WMS_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
  SERVICE_WPS_NAME: gs-cloud-statefulset-gsc-wps
  SERVICE_WPS_CONTAINER_SPRING_IMAGE_TAG: "1.7-RC3"
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gateway
    one-custom-label: my-label
  annotations:
    my-custom-annotation: hello
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gateway
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-gwc
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gwc
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gwc
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: rest
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: rest
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-wcs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wcs
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wcs
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: webui
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: webui
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-wfs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wfs
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wfs
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-statefulset-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wms
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wms
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-statefulset-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: gateway
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-gateway:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-statefulset-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: rest
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: rest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: rest
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-rest:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-statefulset-gsc-wcs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wcs
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: wcs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: wcs
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wcs:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-statefulset-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: webui
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: webui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: webui
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-webui:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-statefulset-gsc-wfs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wfs
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: wfs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: wfs
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wfs:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-statefulset-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: wms
spec:
  replicas: 2
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: wms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: wms
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wms:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          emptyDir: {}
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gs-cloud-statefulset-gsc-gwc
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: gwc
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-statefulset
      app.kubernetes.io/component: gwc
  persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Delete
  volumeClaimTemplates:
      - metadata:
          name: cache
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          storageClassName: local-path
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-statefulset
        app.kubernetes.io/component: gwc
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-gwc:1.7-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-statefulset-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,datadir
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -Dspring.config.additional-location=optional:file:/custom/geodata/jndi.yml
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /custom/geodata
              name: geodata
              readOnly: true
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: cache
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geodata
          configMap:
            name: cm-jndi-geodata
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-statefulset/charts/geoservercloud/charts/geoserver/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gs-cloud-statefulset-geoserver-host1
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-statefulset
    app.kubernetes.io/component: main
  annotations:
    my-annotation: coucou
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  rules:
    - host: "gscloud.local"
      http:
        paths:
          - path: "/geoserver-cloud/"
            pathType: Prefix
            backend:
              service:
                name: gs-cloud-statefulset-gsc-gateway
                port:
                  number: 8080
