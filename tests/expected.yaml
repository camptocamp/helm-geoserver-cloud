---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: test-rabbitmq
---
# Source: ogscloud/charts/geoservercloud/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-geoservercloud
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
---
# Source: ogscloud/charts/geoservercloud/templates/secrets/secret_postgres.yaml
apiVersion: v1
data:
  DATABASE_NAME: Y29uZmln
  HOST: dGVzdC1wb3N0Z3Jlc3Fs
  ROLE: dXNlcm5hbWU=
  PASSWORD: cGFzc3dvcmQ=
  PORT: NTQzMg==


kind: Secret
metadata:
  name: jdbcconfig-test-geoservercloud
type: Opaque
---
# Source: ogscloud/charts/geoservercloud/templates/secrets/secret_rabbitmq.yaml
apiVersion: v1
data:
  rabbitmq-erlang-cookie: UDQ1UXdPNEJaZFBOZkFLNGhMVnZnQ0tUbVFoZ1pn
  rabbitmq-password: Z2Vvc2VydmVy
kind: Secret
metadata:
  name: geoserver-rabbitmq
  #namespace: sig-dev
type: Opaque
---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    ##
    default_user = geoserver
    default_pass = CHANGEME
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = default-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
# Source: ogscloud/charts/geoservercloud/templates/config/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-geoservercloud-config-configs
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "config"
data:
  application.yml: |
    server:
      tomcat:
        # Maximum number of connections that the server accepts and processes at any given time.
        # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
        max-connections: 1000 # default: 8192
        # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
        accept-count: 100 # default: 100
        accesslog:
          enabled: false
          directory: logs
          encoding: UTF-8
        threads:
          # Minimum amount of worker threads.
          min-spare: 2 #default: 10
          # Maximum amount of worker threads.
          max: 20 #default: 200

    # Common configuration for all services. Override or add service specific config
    # properties on each <service-name>-service.yml file

    # GeoTools HTTP Client proxy configuration, allows configuring cascaded WMS/WMTS/WFS stores
    # that need to go through an HTTP proxy without affecting all the http clients at the JVM level
    # These are default settings. The enabled property can be set to false to disable the custom
    # HTTPClientFactory altogether.
    # The following OS environment variables can be set for easier configuration:
    # HTTP(S)_PROXYHOST, HTTP(S)_PROXYPORT, HTTP(S)_PROXYUSER, HTTP(S)_PROXYPASSWORD, HTTP(S)_NONPROXYHOSTS
    geotools:
      httpclient:
        proxy:
          enabled: true
          http:
            host: ${http.proxyHost:}
            port: ${http.proxyPort:}
            user: ${http.proxyUser:}
            password: ${http.proxyPassword:}
            nonProxyHosts: ${http.nonProxyHosts:localhost.*}
            # comma separated list of Java regular expressions, e.g.: nonProxyHosts: localhost, example.*
          https:
            host: ${https.proxyHost:${geotools.httpclient.proxy.http.host}}
            port: ${https.proxyPort:${geotools.httpclient.proxy.http.port}}
            user: ${https.proxyUser:${geotools.httpclient.proxy.http.user}}
            password: ${https.proxyPassword:${geotools.httpclient.proxy.http.password}}
            nonProxyHosts: ${https.nonProxyHosts:${geotools.httpclient.proxy.http.nonProxyHosts}}

    gwc:
      enabled: true
      cache-directory: ${GEOWEBCACHE_CACHE_DIR:${geoserver.backend.data-directory.location}/gwc}
      rest-config: true
      web-ui: true
      services:
        wmts: true
        tms: true
        wms: true
        kml: true
        gmaps: true
        mgmaps: true
      blobstores:
        azure: true
        s3: true

    # GeoServer-Cloud common config properties
    geoserver:
      security:
        enabled: true
        authkey: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
        # enable caching if using the catalog-service as backend
        caching.enabled: ${geoserver.backend.catalog-service.enabled}
      bus:
        # whether to send distributed events (i.e. acts as master). All instances receive remote events.
        send-events: true
        # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false,
        # not all possible payload types are properly tested, and full object payload is not needed.
        send-object: ${geoserver.backend.data-directory.enabled}
        # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.
        send-diff: ${geoserver.backend.data-directory.enabled}
      backend:
        # configure catalog backends and decide which backend to use on this service.
        # All backends are disabled, enable the required one on each service. For example, the catalog microservice
        # will enable one backend type, and the front services the catalog-service backend.
        # revisit: Could be split into profiles
        catalog-service:
          enabled: ${backend.catalog:false}
          # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for "catalog-service"
          # This allows to explicitly set a fixed location for the catalog service.
          # uri: http://catalog:8080
          cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store
          fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store
        data-directory:
          enabled: ${backend.data-directory:false}
          location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory}
        jdbcconfig:
          enabled: ${backend.jdbcconfig:false}
          initdb: true
          web.enabled: true
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}
          datasource:
            url: "${jdbcconfig.url:jdbc:postgresql://${jdbcconfig.host}:${jdbcconfig.port:5432}/${jdbcconfig.database}?currentSchema=${jdbcconfig.schema:public}}"
            username: ${jdbcconfig.username:geoserver}
            password: ${jdbcconfig.password:geo5erver}
            driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
            # optional:
            minimumIdle: ${jdbcconfig.minConnections:2}
            maximumPoolSize: ${jdbcconfig.maxConnections:8}
      styling:
        css.enabled: true
        mapbox.enabled: true
      wms:
        output-formats:
          vector-tiles:
            mapbox.enabled: true
            geojson.enabled: true
            topojson.enabled: true

    management:
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"
      endpoint:
        info.enabled: true
        metrics.enabled: true
        shutdown.enabled: true
        health:
          enabled: true
          show-details: always
      metrics:
        binders:
          processor.enabled: true
          uptime.enabled: true
          jvm.enabled: true
        enable.all: true
        enable.jvm: true
        export:
          atlas.enabled: false

    spring:
      rabbitmq:
        host: test-rabbitmq
        port: 5672
        username: geoserver
        password: ${RABBITMQ_PASSWORD}
      cloud:
        bus:
          enabled: true
          id: ${info.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: false #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog
      jackson:
        default-property-inclusion: non-empty
        serialization.indent-output: false #set to true if doing manual testing and want formatted output

    reactive.feign.cloud.enabled: true
    reactive.feign.hystrix.enabled: false

    # Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
    # See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
    eureka.client.healthcheck.enabled: true

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.springframework.retry: info
        org.springframework.jdbc.support: info
        com.zaxxer.hikari.pool: OFF
        org.geotools.autoconfigure: info
        # geoserver roots
        org.geoserver: INFO
        org.geoserver.catalog.plugin: INFO
        org.geoserver.wms: WARN #don't flood the logs with every request details
        org.geoserver.wfs: WARN
        org.geoserver.jackson: INFO
        org.geotools.jackson: INFO
        org.geoserver.platform: INFO
        org.geoserver.platform.resource: INFO
        org.geoserver.jdbcconfig: INFO
        oshi.hardware.platform.linux: ERROR
        oshi.software.os: ERROR
        # gs-cloud roots
        org.geoserver.cloud: INFO
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.cloud.config.factory: INFO
        # bus debugging
        org.geoserver.cloud.bus: INFO
        org.springframework.cloud.bus.BusAutoConfiguration: INFO
        org.springframework.cloud.bus.DefaultBusPathMatcher: INFO
        # reactivefeign:
        reactivefeign.client.log: INFO
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN
        com.netflix.eureka.registry.AbstractInstanceRegistry: ERROR # log flooding with "WARN No remote registry available for the remote region us-east-1"
        com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: ERROR # log flooding with "WARN No remote registry available for the remote region us-east-1"

    ---
    spring.config.activate.on-profile: datadir
    backend.jdbcconfig: false
    backend.catalog: false
    backend.data-directory: true
    ---
    spring.config.activate.on-profile: jdbcconfig
    backend.jdbcconfig: true
    backend.catalog: false
    backend.data-directory: false
    ---
    spring.config.activate.on-profile: catalog
    backend.catalog: true
    backend.jdbcconfig: false
    backend.data-directory: false
    ---
    spring.config.activate.on-profile: debug

    logging:
      level:
        root: WARN
        org.springframework: INFO
        # geoserver roots
        org.geoserver: INFO
        org.geoserver.catalog.plugin: DEBUG
        org.geoserver.wms: WARN
        org.geoserver.wfs: WARN
        org.geoserver.jackson: DEBUG
        org.geotools.jackson: DEBUG
        org.geoserver.platform: ERROR
        org.geoserver.platform.resource.MemoryLockProvider: INFO
        org.geoserver.platform.resource.NioFileLockProvider: DEBUG
        org.geoserver.platform.resource.FileLockProvider: DEBUG
        org.geoserver.jdbcconfig: INFO
        # gs-cloud roots
        org.geoserver.cloud: DEBUG
        org.geoserver.cloud.autoconfigure: DEBUG
        org.geoserver.cloud.config.factory: DEBUG
        # bus debugging
        org.geoserver.cloud.bus: TRACE
        org.springframework.cloud.bus: DEBUG
        org.springframework.cloud.bus.BusAutoConfiguration: DEBUG
        org.springframework.cloud.bus.DefaultBusPathMatcher: INFO
        # reactivefeign:
        reactivefeign.client.log: info
  catalog-service.yml: |
    geoserver:
      security.enabled: false
      # Disable advertised catalog, it checks the org.geoserver.ows.Dispatcher.REQUEST to check if an OWS is in progress,
      # which can never be the case, and causes a java.lang.NoClassDefFoundError on org.springframework.web.servlet.mvc.AbstractController
      catalog:
        advertised: false
        # Disable LocalWorkspaceCatalog decorator, this service exposes a "raw catalog" backend, there's no concept of local workspaces
        localWorkspace: false
        secure: false
        # enable caching while using the jdbcconfig backend, we've disabled its own internal caching due to concurrency related bugs
        caching.enabled: ${geoserver.backend.jdbcconfig.enabled}
      catalog-service:
        io-threads:
          # Number of back-end threads to hit the actual catalog with. Defaults 4 * number of cores if unset.
          # If using jdbcconfig, let io-threads be about half the size of geoserver.backend.jdbcconfig.datasource.maximumPoolSize,
          # it has the tendency to use more than one jdbc connection for some requests.
          max-size: ${catalog.io.threads:8}
          # maximum number of queued requests per worker thread before rejecting new requests
          max-queued: ${catalog.io.maxQueued:10000}
      bus:
        # receive events but don't publish, it's the front catalogs that publish events to better track where the changes come from
        send-events: false
      backend:
        # decide which catalog backend to use on this service, default to using jdbcconfig
        jdbcconfig.enabled: ${backend.jdbcconfig:true}

  config-service.yml: |
    spring:
      profiles:
        active: native #use native filesystem config by default instead of git. REVISIT.
      config.server.native.searchLocations: ${config.path:file:./config}
    eureka.client.healthcheck.enabled: false

    logging:
      level:
        root: WARN
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN



  gateway-service.yml: |
    # Defines the root base path at which the gateway exposes all geoserver request paths
    # We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't
    # work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759
    # For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served
    # under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)
    # Examples:
    #geoserver.base-path:
    #geoserver.base-path: /geoserver-cloud
    #geoserver.base-path: /geoserver/cloud
    # Leave it empty for no additional path, setting it to / won't work currently
    #
    # Please note any other prefix than the empty string will require a trailing slash in the root URL
    # for the redirection to the web-ui to work. This is something we need to fix. For example:
    # http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.
    geoserver.base-path:  /geoserver-cloud

    # Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
    server:
      compression:
        enabled: true

    management:
      endpoint.gateway.enabled: true # default value
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"

    spring:
      cloud:
        gateway:
          globalcors:
            cors-configurations:
              '[/**]':
                allowedOrigins: "*"
                allowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - OPTIONS
                - HEAD
          default-filters:
            - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests
          actuator:
            verbose:
              enabled: true
          routes:
            - id: catalog
              uri: lb://catalog-service
              predicates:
                - Path=${geoserver.base-path}/api/v1/**
              filters: # Expose the catalog and configuration API only if the dev profile is active
                - RouteProfile=dev,403
            # WFS routes
            - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
              uri: lb://wfs-service #load balanced to the wfs-service instances
              predicates:
                - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**
            # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
            - id: wfs_ows
              uri: lb://wfs-service
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
            # WMS routes
            - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
              uri: lb://wms-service #load balanced to the wms-service instances
              predicates:
                - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**
            - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
              uri: lb://wms-service
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
            # WCS routes
            - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
              uri: lb://wcs-service #load balanced to the wps-service instances
              predicates:
                - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**
            - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
              uri: lb://wcs-service
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
            # WPS routes
            - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
              uri: lb://wps-service #load balanced to the wps-service instances
              predicates:
                - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**
            - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
              uri: lb://wps-service
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows
                - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively
            # REST configuration routes
            - id: restconfig
              uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances
              predicates:
                - Path=${geoserver.base-path}/rest/**
            # GeoWebcache configuration routes
            - id: gwc
              uri: lb://gwc-service
              predicates:
                - Path=${geoserver.base-path}/gwc/**
            # Web UI configuration routes
            - id: webui
              uri: lb://web-ui
              predicates:
                - Path=${geoserver.base-path}/**
              #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout

    logging:
      level:
        root: WARN
        com.netflix.discovery: INFO
        com.netflix.eureka: INFO
        org.springframework.cloud.gateway: info
        org.springframework.cloud.gateway.handler: info
        reactor.netty: INFO
  gwc-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
  restconfig-v1.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
  wcs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
  web-ui.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
      web-ui:
        file-browser.hide-file-system: true
        # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure
        security.enabled: true
        wfs.enabled: true
        wms.enabled: true
        wcs.enabled: true
        wps.enabled: false # not working yet
        gwc:
          enabled: ${gwc.enabled:false}
          capabilities:
            tms: ${gwc.services.tms:false}
            wmts: ${gwc.services.wmts:false}
            wmsc: ${gwc.services.wms:false}
        extensions:
          importer.enabled: true
          geostyler.enabled: true
        demos:
          enabled: true
          wps-request-builder: true
          wcs-request-builder: true
          demo-requests: true
          srs-list: true
          reprojection-console: true
          layer-preview-page:
            enabled: true
            common-formats:
              open-layers: true
              gml: true
              kml: false #kml links are broken
        tools:
          enabled: true
          resource-browser: true
          catalog-bulk-load: true
  restconfig-v1.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}

  wfs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
  wms-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
  wps-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: test-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: test-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: test-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: test-rabbitmq-endpoint-reader
---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: test
  publishNotReadyAddresses: true
---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: test
---
# Source: ogscloud/charts/geoservercloud/templates/config/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-config
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: config
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: config
---
# Source: ogscloud/charts/geoservercloud/templates/discovery/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-discovery
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: discovery
spec:
  type: ClusterIP
  ports:
    - port: 8761
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: discovery
---
# Source: ogscloud/charts/geoservercloud/templates/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-gateway
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: gateway
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# service gwc
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-gwc
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gwc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:

    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: gwc
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# service rest
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-rest
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: rest
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:

    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: rest
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# service wcs
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-wcs
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: wcs
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:

    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: wcs
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# service webui
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-webui
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webui
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:

    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: webui
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# service wfs
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-wfs
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: wfs
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:

    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: wfs
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# service wms
apiVersion: v1
kind: Service
metadata:
  name: test-geoservercloud-wms
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: wms
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:

    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: wms
---
# Source: ogscloud/charts/geoservercloud/templates/config/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-config
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "config"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: "config"
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:
        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: "config"
    spec:
      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoservercloud-config
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-config:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: native
            - name: CONFIG_NATIVE_PATH
              value: /opt/app/config

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          volumeMounts:
            - name: configs
              mountPath: /opt/app/config

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              cpu: 2
              memory: 512Mi
            requests:
              cpu: 0.1
              memory: 128Mi
      volumes:
        - name: configs
          configMap:
            name: test-geoservercloud-config-configs
---
# Source: ogscloud/charts/geoservercloud/templates/discovery/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-discovery
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: discovery
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: discovery
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:
        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: discovery
    spec:
      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoservercloud-discovery
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-discovery:1.0-RC10"
          imagePullPolicy: IfNotPresent
          env:
            - name: EUREKA_INSTANCE_HOSTNAME
              value: test-geoservercloud-discovery
            - name: SERVER_PORT
              value: "8761"

          ports:
            - name: http
              containerPort: 8761
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              cpu: 2
              memory: 512Mi
            requests:
              cpu: 0.1
              memory: 128Mi
---
# Source: ogscloud/charts/geoservercloud/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-gateway
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: gateway
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:
        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: gateway
    spec:
      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoservercloud-gateway
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-gateway:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:

            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              cpu: 2
              memory: 512Mi
            requests:
              cpu: 0.1
              memory: 128Mi
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# deployment gwc
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-gwc
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gwc
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: gwc
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:

        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: gwc
    spec:
      volumes:
        - name: nfs-pv-storage-rasters
          persistentVolumeClaim:
           claimName: nfs-rasters-pv-claim

      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: gwc
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-gwc:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java -DALLOW_ENV_PARAMETRIZATION=true org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/geoserver/nfsrasters"
              name: nfs-pv-storage-rasters
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# deployment rest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-rest
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: rest
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: rest
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:

        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: rest
    spec:
      volumes:
        - name: nfs-pv-storage-rasters
          persistentVolumeClaim:
           claimName: nfs-rasters-pv-claim

      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: rest
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-rest:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java -DALLOW_ENV_PARAMETRIZATION=true org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/geoserver/nfsrasters"
              name: nfs-pv-storage-rasters
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 0.1
              memory: 512Mi
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# deployment wcs
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-wcs
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: wcs
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: wcs
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:

        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: wcs
    spec:
      volumes:
        - name: nfs-pv-storage-rasters
          persistentVolumeClaim:
           claimName: nfs-rasters-pv-claim

      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: wcs
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-wcs:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java -DALLOW_ENV_PARAMETRIZATION=true org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/geoserver/nfsrasters"
              name: nfs-pv-storage-rasters
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# deployment webui
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-webui
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webui
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: webui
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:

        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: webui
    spec:
      volumes:
        - name: nfs-pv-storage-rasters
          persistentVolumeClaim:
           claimName: nfs-rasters-pv-claim

      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: webui
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-webui:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java -DALLOW_ENV_PARAMETRIZATION=true org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/geoserver/nfsrasters"
              name: nfs-pv-storage-rasters
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

          resources:
            limits:
              cpu: 2
              memory: 512Mi
            requests:
              cpu: 0.1
              memory: 128Mi
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# deployment wfs
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-wfs
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: wfs
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: wfs
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:

        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: wfs
    spec:
      volumes:
        - name: nfs-pv-storage-rasters
          persistentVolumeClaim:
           claimName: nfs-rasters-pv-claim

      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: wfs
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-wfs:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java -DALLOW_ENV_PARAMETRIZATION=true org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/geoserver/nfsrasters"
              name: nfs-pv-storage-rasters
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
---
# Source: ogscloud/charts/geoservercloud/templates/generic/service_and_deployment.yaml
# deployment wms
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoservercloud-wms
  labels:
    helm.sh/chart: geoservercloud-0.0.26
    deployed_by: helm
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoservercloud
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.0-RC10"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: wms
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:

      app.kubernetes.io/name: geoservercloud
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: wms
  template:
    metadata:
      annotations:
        checksum/config: 03ed526302d560caea9223d62efcaf06bd0d9e5868152552be7657d69ec611d4
      labels:

        app.kubernetes.io/name: geoservercloud
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: wms
    spec:
      volumes:
        - name: nfs-pv-storage-rasters
          persistentVolumeClaim:
           claimName: nfs-rasters-pv-claim

      serviceAccountName: test-geoservercloud
      securityContext:
        runAsUser: 630
      containers:
        - name: wms
          securityContext:
            {}
          image: "docker.io/geoservercloud/geoserver-cloud-wms:1.0-RC10"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java -DALLOW_ENV_PARAMETRIZATION=true org.springframework.boot.loader.JarLauncher
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"

            - name: EUREKA_SERVER_URL
              value: http://test-geoservercloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PASSWORD
            - name: JDBCCONFIG_PORT
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-test-geoservercloud
                  key: PORT
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: test-geoservercloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/geoserver/nfsrasters"
              name: nfs-pv-storage-rasters
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
---
# Source: ogscloud/charts/geoservercloud/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.28.1
    app.kubernetes.io/instance: test
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: test-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.28.1
        app.kubernetes.io/instance: test
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: dc8292444f69b4b1f01026d65e4bcf9390effe287ea65e8000e90a0aac194a1f
    spec:

      serviceAccountName: test-rabbitmq
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: test
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.13-debian-10-r14
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "test-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "geoserver"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: test-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
