---
# Source: gs-cloud-hpa/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: gateway
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: gateway
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: rest
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: rest
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: webui
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: webui
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: wms
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: wms
---
# Source: gs-cloud-hpa/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: gs-cloud-hpa/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
automountServiceAccountToken: false
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/secret-docker-registry.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gs-cloud-pgconfig-wm-geoserver-dockerregistry
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: dockerregistry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJmaXgtZW5kLWNvbW1hIjogeyJhdXRoIjogIiJ9CiAgfQp9
---
# Source: gs-cloud-hpa/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
type: Opaque
data:
  postgres-password: "ZzMwczNydjNy"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/cm_metadata.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gs-cloud-pgconfig-wm-geoserver-metadata
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: main
data:
  CHART_NAME: geoserver
  RELEASE_NAME: gs-cloud-pgconfig-wms-hpa
  RELEASE_NAMESPACE: default
  SERVICE_ACL_NAME: gs-cloud-pgconfig-wms-hpa-gsc-acl
  SERVICE_ACL_CONTAINER_SPRING_IMAGE_TAG: "2.3.2"
  SERVICE_GATEWAY_NAME: gs-cloud-pgconfig-wms-hpa-gsc-gateway
  SERVICE_GATEWAY_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_GWC_NAME: gs-cloud-pgconfig-wms-hpa-gsc-gwc
  SERVICE_GWC_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_REST_NAME: gs-cloud-pgconfig-wms-hpa-gsc-rest
  SERVICE_REST_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_WCS_NAME: gs-cloud-pgconfig-wms-hpa-gsc-wcs
  SERVICE_WCS_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_WEBUI_NAME: gs-cloud-pgconfig-wms-hpa-gsc-webui
  SERVICE_WEBUI_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_WFS_NAME: gs-cloud-pgconfig-wms-hpa-gsc-wfs
  SERVICE_WFS_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_WMS_NAME: gs-cloud-pgconfig-wms-hpa-gsc-wms
  SERVICE_WMS_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
  SERVICE_WPS_NAME: gs-cloud-pgconfig-wms-hpa-gsc-wps
  SERVICE_WPS_CONTAINER_SPRING_IMAGE_TAG: "2.28.0.0"
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: gateway
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: gateway
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: rest
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: rest
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: webui
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: webui
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: wms
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: wms
---
# Source: gs-cloud-hpa/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: gs-cloud-hpa/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
        app.kubernetes.io/component: gateway
    spec:
      imagePullSecrets:
        - name: gs-cloud-pgconfig-wm-geoserver-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-gateway:2.28.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PGCONFIG_DATABASE"
              value: postgres
            - name: "PGCONFIG_HOST"
              value: gs-cloud-pgconfig-wms-hpa-postgresql-hl
            - name: "PGCONFIG_MAXCONNECTIONS"
              value: "10"
            - name: "PGCONFIG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "PGCONFIG_PORT"
              value: "5432"
            - name: "PGCONFIG_SCHEMA"
              value: pgconfig
            - name: "PGCONFIG_USERNAME"
              value: postgres
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

      volumes:
        - name: cache
          emptyDir: {}
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: rest
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: rest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
        app.kubernetes.io/component: rest
    spec:
      imagePullSecrets:
        - name: gs-cloud-pgconfig-wm-geoserver-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-rest:2.28.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PGCONFIG_DATABASE"
              value: postgres
            - name: "PGCONFIG_HOST"
              value: gs-cloud-pgconfig-wms-hpa-postgresql-hl
            - name: "PGCONFIG_MAXCONNECTIONS"
              value: "10"
            - name: "PGCONFIG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "PGCONFIG_PORT"
              value: "5432"
            - name: "PGCONFIG_SCHEMA"
              value: pgconfig
            - name: "PGCONFIG_USERNAME"
              value: postgres
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

      volumes:
        - name: cache
          emptyDir: {}
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: webui
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: webui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
        app.kubernetes.io/component: webui
    spec:
      imagePullSecrets:
        - name: gs-cloud-pgconfig-wm-geoserver-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-webui:2.28.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PGCONFIG_DATABASE"
              value: postgres
            - name: "PGCONFIG_HOST"
              value: gs-cloud-pgconfig-wms-hpa-postgresql-hl
            - name: "PGCONFIG_MAXCONNECTIONS"
              value: "10"
            - name: "PGCONFIG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "PGCONFIG_PORT"
              value: "5432"
            - name: "PGCONFIG_SCHEMA"
              value: pgconfig
            - name: "PGCONFIG_USERNAME"
              value: postgres
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

      volumes:
        - name: cache
          emptyDir: {}
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: wms
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/component: wms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
        app.kubernetes.io/component: wms
    spec:
      imagePullSecrets:
        - name: gs-cloud-pgconfig-wm-geoserver-docker-registry
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wms:2.28.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERNAME"
              value: geoserver
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PGCONFIG_DATABASE"
              value: postgres
            - name: "PGCONFIG_HOST"
              value: gs-cloud-pgconfig-wms-hpa-postgresql-hl
            - name: "PGCONFIG_MAXCONNECTIONS"
              value: "10"
            - name: "PGCONFIG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "PGCONFIG_PORT"
              value: "5432"
            - name: "PGCONFIG_SCHEMA"
              value: pgconfig
            - name: "PGCONFIG_USERNAME"
              value: postgres
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-wms-hpa-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-wm-geoserver-metadata
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5

      volumes:
        - name: cache
          emptyDir: {}
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gs-cloud-pgconfig-wms-hpa-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: wms
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gs-cloud-pgconfig-wms-hpa-gsc-wms
  minReplicas: 1
  maxReplicas: 16
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 70
          type: Utilization
      type: Resource
---
# Source: gs-cloud-hpa/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gs-cloud-pgconfig-wms-hpa-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: gs-cloud-pgconfig-wms-hpa-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: gs-cloud-pgconfig-wms-hpa-postgresql
      labels:
        app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.2
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: gs-cloud-pgconfig-wms-hpa-postgresql

      automountServiceAccountToken: false
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnamilegacy/postgresql:16.3.0-debian-12-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gs-cloud-pgconfig-wms-hpa-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gs-cloud-hpa/charts/geoservercloud/charts/geoserver/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gs-cloud-pgconfig-wm-geoserver-host1
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-pgconfig-wms-hpa
    app.kubernetes.io/component: host1
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  rules:
    - host: "gscloud.local"
      http:
        paths:
          - path: "/geoserver-cloud/"
            pathType: Prefix
            backend:
              service:
                name: gs-cloud-pgconfig-wms-hpa-gsc-gateway
                port:
                  number: 8080
