---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: gs-cloud-pgconfig-acl-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    # Allow dns resolution
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
    # Allow outbound connections to read-replicas
    - ports:
        - port: 5432
        - port: 5432
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: gs-cloud-pgconfig-acl
              app.kubernetes.io/name: postgresql
              app.kubernetes.io/component: read
  ingress:
    - ports:
        - port: 5432
---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/read/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: gs-cloud-pgconfig-acl-postgresql-read
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
    app.kubernetes.io/component: read
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: read
  policyTypes:
    - Ingress
    - Egress
  egress:
    # Allow dns resolution
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
    # Allow outbound connections to primary
    - ports:
        - port: 5432
        - port: 5432
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: gs-cloud-pgconfig-acl
              app.kubernetes.io/name: postgresql
              app.kubernetes.io/component: primary
  ingress:
    - ports:
        - port: 5432
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-acl
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: acl
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: acl
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-gateway
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gateway
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: gateway
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-gwc
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gwc
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: gwc
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-rest
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: rest
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: rest
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wcs
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wcs
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wcs
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-webui
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: webui
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: webui
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wfs
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wfs
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wfs
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wms
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wms
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wms
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wps
  labels:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wps
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wps
---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gs-cloud-pgconfig-acl-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
automountServiceAccountToken: false
---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gs-cloud-pgconfig-acl-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
type: Opaque
data:
  postgres-password: "ZzMwczNydjNy"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: gs-cloud-pgconfig/templates/geoserver-acl-secret.yml
apiVersion: v1
kind: Secret
metadata:
    name: gs-cloud-pgconfig-acl-acl-config
type: Opaque
data:
    acl-username: Z2Vvc2VydmVy # geoserver
    acl-password: czNjcjN0 # s3cr3t
    acl-db-username: cG9zdGdyZXM= # postgres
    acl-db-password: ZzMwczNydjNy # g30s3rv3r
    acl-users-admin-password: e25vb3B9czNjcjN0 # {noop}s3cr3t
    acl-users-geoserver-password: e25vb3B9czNjcjN0 # {noop}s3cr3t
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gs-cloud-pgconfig-ac-geoserver
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: main
data:
  CHART_NAME: geoserver
  RELEASE_NAME: gs-cloud-pgconfig-acl
  RELEASE_NAMESPACE: default
  SERVICE_ACL_NAME: gs-cloud-pgconfig-acl-gsc-acl
  SERVICE_ACL_CONTAINER_SPRING_IMAGE_TAG: "2.2.0"
  SERVICE_GATEWAY_NAME: gs-cloud-pgconfig-acl-gsc-gateway
  SERVICE_GATEWAY_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_GWC_NAME: gs-cloud-pgconfig-acl-gsc-gwc
  SERVICE_GWC_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_REST_NAME: gs-cloud-pgconfig-acl-gsc-rest
  SERVICE_REST_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_WCS_NAME: gs-cloud-pgconfig-acl-gsc-wcs
  SERVICE_WCS_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_WEBUI_NAME: gs-cloud-pgconfig-acl-gsc-webui
  SERVICE_WEBUI_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_WFS_NAME: gs-cloud-pgconfig-acl-gsc-wfs
  SERVICE_WFS_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_WMS_NAME: gs-cloud-pgconfig-acl-gsc-wms
  SERVICE_WMS_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
  SERVICE_WPS_NAME: gs-cloud-pgconfig-acl-gsc-wps
  SERVICE_WPS_CONTAINER_SPRING_IMAGE_TAG: "1.7.2"
---
# Source: gs-cloud-pgconfig/templates/geoserver-pgconfig-cm.yml
apiVersion: v1
kind: ConfigMap
metadata:
    creationTimestamp: null
    name: geoserver-pgconfig-cm
data:
    pgconfig-jndi.yml: |-
        jndi:
          datasources:
            pgconfig:
              enabled: true
              schema: pgconfig
              wait-for-it: true
              wait-timeout: 10
              url: jdbc:postgresql://gs-cloud-pgconfig-acl-postgresql-hl:5432/postgres
              username: postgres
              password: ${pg.password}
              maximum-pool-size: 10
              minimum-idle: 2
              connection-timeout: 250
              idle-timeout: 60000
---
# Source: gs-cloud-pgconfig/templates/install-postgis-cm.yml
apiVersion: v1
kind: ConfigMap
metadata:
    name: install-postgis-configmap
data:
    install-postgis.sh: |
        #!/bin/bash
        set -e
        echo "Creating PostGIS extension..."
        PGPASSWORD=$(echo $POSTGRES_PASSWORD) psql -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS postgis;"
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-acl
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: acl
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: acl
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gateway
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gateway
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-gwc
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gwc
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gwc
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: rest
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: rest
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wcs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wcs
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wcs
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: webui
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: webui
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wfs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wfs
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wfs
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wms
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wms
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wps
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wps
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wps
---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gs-cloud-pgconfig-acl-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-acl
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: acl
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: acl
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: acl
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-acl:2.2.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_USERS_ADMIN_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-users-admin-password"
            - name: "ACL_USERS_GEOSERVER_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-users-geoserver-password"
            - name: "GEOSERVER_BUS_ENABLED"
              value: "true"
            - name: "PG_DB"
              value: postgres
            - name: "PG_HOST"
              value: gs-cloud-pgconfig-acl-postgresql-hl
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-db-password"
            - name: "PG_PORT"
              value: "5432"
            - name: "PG_SCHEMA"
              value: acl
            - name: "PG_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-db-username"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_PORT"
              value: "5672"
            - name: "RABBITMQ_USER"
              value: geoserver
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

      volumes:
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-gateway
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: gateway
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-gateway:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-gwc
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: gwc
spec:
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: gwc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: gwc
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-gwc:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-rest
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: rest
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: rest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: rest
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-rest:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wcs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wcs
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wcs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: wcs
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wcs:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-webui
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: webui
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: webui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: webui
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-webui:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wfs
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wfs
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wfs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: wfs
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wfs:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wms
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wms
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: wms
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wms:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gs-cloud-pgconfig-acl-gsc-wps
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: gsc
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: wps
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: gsc
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/component: wps
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gsc
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/component: wps
    spec:
      serviceAccountName: default
      securityContext:
        {}
      affinity:
        null
      containers:
        - name: spring
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          image: "geoservercloud/geoserver-cloud-wps:1.7.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: "ACL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-password"
            - name: "ACL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-acl-config"
                  key: "acl-username"
            - name: "APP_KUBERNETES_IO_COMPONENT"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: "APP_KUBERNETES_IO_INSTANCE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/instance']
            - name: "APP_KUBERNETES_IO_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: "GEOSERVER_BASE_PATH"
              value: /geoserver-cloud
            - name: "GEOTOOLS_HTTPCLIENT_PROXY_ENABLED"
              value: "false"
            - name: "GEOWEBCACHE_CACHE_DIR"
              value: /mnt/cache
            - name: "GWC_ENABLED"
              value: "true"
            - name: "JAVA_OPTS_DEFAULT"
              value: -DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80
            - name: "PG_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-pgconfig-acl-postgresql"
                  key: "postgres-password"
            - name: "RABBITMQ_HOST"
              value: gs-cloud-common-rabbitmq
            - name: "RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "gs-cloud-common-rabbitmq"
                  key: "rabbitmq-password"
            - name: "RABBITMQ_USER"
              value: geoserver
            - name: "SERVICE_ACL_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_ACL_NAME"
            - name: "SERVICE_GATEWAY_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GATEWAY_NAME"
            - name: "SERVICE_GWC_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_GWC_NAME"
            - name: "SERVICE_REST_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_REST_NAME"
            - name: "SERVICE_WCS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WCS_NAME"
            - name: "SERVICE_WEBUI_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WEBUI_NAME"
            - name: "SERVICE_WFS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WFS_NAME"
            - name: "SERVICE_WMS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WMS_NAME"
            - name: "SERVICE_WPS_NAME"
              valueFrom:
                configMapKeyRef:
                  name: gs-cloud-pgconfig-ac-geoserver
                  key: "SERVICE_WPS_NAME"
            - name: "SPRING_CONFIG_ADDITIONAL_LOCATION"
              value: optional:file:/etc/gscloud-custom/pgconfig-jndi.yml
            - name: "SPRING_PROFILES_ACTIVE"
              value: standalone,pgconfig,acl
            - name: "ACL_URL"
              value: http://$(SERVICE_ACL_NAME):8080/acl/api
            - name: "JAVA_OPTS"
              value: $(JAVA_OPTS_DEFAULT) -XshowSettings:system
            - name: "TARGETS_ACL"
              value: http://$(SERVICE_ACL_NAME):8080
            - name: "TARGETS_GWC"
              value: http://$(SERVICE_GWC_NAME):8080
            - name: "TARGETS_REST"
              value: http://$(SERVICE_REST_NAME):8080
            - name: "TARGETS_WCS"
              value: http://$(SERVICE_WCS_NAME):8080
            - name: "TARGETS_WEBUI"
              value: http://$(SERVICE_WEBUI_NAME):8080
            - name: "TARGETS_WFS"
              value: http://$(SERVICE_WFS_NAME):8080
            - name: "TARGETS_WMS"
              value: http://$(SERVICE_WMS_NAME):8080
            - name: "TARGETS_WPS"
              value: http://$(SERVICE_WPS_NAME):8080
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: 4
              memory: 4Gi
            requests:
              cpu: 0.1
              memory: 512Mi
          volumeMounts:
            - mountPath: /etc/gscloud-custom
              name: geoserver-pgconfig-config
            - mountPath: /etc/localconfig
              name: vol-local-gscloud
            - mountPath: /mnt/cache
              name: cache
            - mountPath: /opt/app/data_directory
              name: datadir
            - mountPath: /tmp/
              name: tmp-empty-dir

          ports:
            - name: health
              containerPort: 8081
              hostIP: 127.0.0.1
            - name: http
              containerPort: 8080
              hostIP: 127.0.0.1

          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            periodSeconds: 5
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: gs-cloud-gwc-cache-nfs-claim
        - name: datadir
          persistentVolumeClaim:
            claimName: gs-cloud-datadir-nfs-claim
        - name: geoserver-pgconfig-config
          configMap:
            name: geoserver-pgconfig-cm
        - name: tmp-empty-dir
          emptyDir: {}
        - name: vol-local-gscloud
          emptyDir: {}
---
# Source: gs-cloud-pgconfig/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gs-cloud-pgconfig-acl-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-14.0.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: gs-cloud-pgconfig-acl-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: gs-cloud-pgconfig-acl
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: gs-cloud-pgconfig-acl-postgresql
      labels:
        app.kubernetes.io/instance: gs-cloud-pgconfig-acl
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-14.0.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: gs-cloud-pgconfig-acl-postgresql

      automountServiceAccountToken: false
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gs-cloud-pgconfig-acl-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: install-postgis-configmap
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gs-cloud-pgconfig/charts/geoservercloud/charts/geoserver/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gs-cloud-pgconfig-ac-geoserver-host1
  labels:
    helm.sh/chart: geoserver
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: gs-cloud-pgconfig-acl
    app.kubernetes.io/component: main
spec:
# Add tls only if ingress.tls.enabled is set to true and the other fields are complete.
  rules:
    - host: "gscloud.local"
      http:
        paths:
          - path: "/geoserver-cloud/"
            pathType: Prefix
            backend:
              service:
                name: gs-cloud-pgconfig-acl-gsc-gateway
                port:
                  number: 8080
