global:
  deployed_by: helm
  revision: HEAD
  custom_pod_labels: {}
  base_environment_name: 'dev'
  app_environment_name: 'master'
  cluster_environment: dev
  image:
    pullPolicy: IfNotPresent
  annotations: {}

rabbitmq:
  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.8.9-debian-10-r37
  auth:
    username: geoserver
    existingPasswordSecret: geoserver-rabbitmq
    existingErlangSecret: geoserver-rabbitmq
  persistence:
    enabled: false

postgresql:
  enabled: true
  fromSecret:
    enabled: false
  persistence:
    enabled: false
  tls:
    enabled: true
    autoGenerated: true
  servicePort: '5432'
  postgresqlDatabase: 'config'
  postgresqlUsername: 'username'
  postgresqlPassword: 'password'

  volumePermissions:
    enabled: true

geoserver:
  name: geoserver

  # volumeMounts only work for the moment only if
  # NFS PV is used, and that the PV is already defined
  # within the cluster
  # example
  # volumeMounts:
  #   - mountPath: '/var/geoserver/nfsrasters'
  #     mountName: 'nfs-pv-storage-rasters'
  #     pvcName: 'nfs-rasters-pv-claim'
  volumeMounts: []

  # environment variables, same format as jdbc.configVariables
  envVariables: {}

  jdbc:
    external: false
    postgresqlDatabase:
      value: ''
      secretKey: ''
      secretName: ''
    postgresqlUsername:
      value: ''
      secretKey: ''
      secretName: ''
    postgresqlPassword:
      value: ''
      secretKey: ''
      secretName: ''
    postgresqlHostName:
      value: ''
      secretKey: ''
      secretName: ''
    postgresqlPort:
      value: ''
      secretKey: ''
      secretName: ''
    # Define outgoing proxy (note: not tested)
    # httpProxyHost:
    #   name: "HTTP_PROXYHOST"
    #   value: "192.168.0.13"
    # httpProxyPort:
    #   name: "HTTP_PROXYPORT"
    #   value: "3128"
    # httpsProxyHost:
    #   name: "HTTPS_PROXYHOST"
    #   value: "192.168.0.13"
    # httpsProxyPort:
    #   name: "HTTPS_PROXYPORT"
    #   value: "3128"
  # example of usage with external secret for the DB connection
  # jdbc:
  #   external: true
  #   postgresqlDatabase:
  #     value: "configdb"
  #   postgresqlUsername:
  #     value: ""
  #     secretKey: "username"
  #   postgresqlPassword:
  #     value: ""
  #     secretKey: "password"
  #   postgresqlHostName:
  #     value: ""
  #     secretKey: "hostname"
  #   postgresqlPort:
  #     value: ""
  #     secretKey: "port"

  ingress:
    deploy: true
    baseUrl: '/geoserver-cloud/'

  serviceAccount:
    create: true
    annotations: {}
    name: ''

  database:
    dropOnDelete: false
    secretConfig: jdbcconfig
    extensions:
      - pg_stat_statements

  rabbitmq:
    port: 5672

  config:
    replicaCount: 1
    image:
      repository: geoservercloud/geoserver-cloud-config
      tag: ''

    env: []

    podAnnotations: {}

    podSecurityContext:
      runAsUser: 630

    securityContext: {}

    resources:
      requests:
        memory: '300Mi'
        cpu: '100m'
      limits:
        memory: '600Mi'
    #        cpu: "300m"

    nodeSelector: {}

    tolerations: {}

    affinity: {}

    service:
      type: ClusterIP
      port: 8080

  gateway:
    replicaCount: 1
    image:
      repository: geoservercloud/geoserver-cloud-gateway
      tag: ''

    env: []

    podAnnotations: {}

    podSecurityContext:
      runAsUser: 630

    securityContext: {}

    resources:
      requests:
        memory: '400Mi'
        cpu: '100m'
      limits:
        memory: '800Mi'
    #        cpu: "300m"

    nodeSelector: {}

    tolerations: {}

    affinity: {}

    service:
      type: ClusterIP
      port: 8080

  discovery:
    replicaCount: 1
    image:
      repository: geoservercloud/geoserver-cloud-discovery
      tag: ''

    env: []

    podAnnotations: {}

    podSecurityContext:
      runAsUser: 630

    securityContext: {}

    resources:
      requests:
        memory: '300Mi'
        cpu: '100m'
      limits:
        memory: '600Mi'
        cpu: '300m'

    nodeSelector: {}

    tolerations: {}

    affinity: {}

    service:
      type: ClusterIP
      port: 8761

  services:
    webui:
      replicaCount: 1
      image:
        repository: geoservercloud/geoserver-cloud-webui
        tag: ''

      env: []

      podAnnotations: {}

      podSecurityContext:
        runAsUser: 630

      securityContext: {}

      resources:
        requests:
          memory: '512Mi'
          cpu: '300m'
        limits:
          memory: '1Gi'
      #        cpu: "600m"

      nodeSelector: {}

      tolerations: {}

      affinity: {}

      service:
        type: ClusterIP
        port: 8080

    rest:
      replicaCount: 1
      image:
        repository: geoservercloud/geoserver-cloud-rest
        tag: ''

      env: []

      podAnnotations: {}

      podSecurityContext:
        runAsUser: 630

      securityContext: {}

      resources:
        requests:
          memory: '512Mi'
          cpu: '200m'
        limits:
          memory: '1Gi'
      #        cpu: "400m"

      nodeSelector: {}

      tolerations: {}

      affinity: {}

      service:
        type: ClusterIP
        port: 8080

    wfs:
      replicaCount: 1
      image:
        repository: geoservercloud/geoserver-cloud-wfs
        tag: ''

      env: []

      podAnnotations: {}

      podSecurityContext:
        runAsUser: 630

      securityContext: {}

      resources:
        requests:
          memory: '400Mi'
          cpu: '200m'
        limits:
          memory: '800Mi'
      #        cpu: "400m"

      nodeSelector: {}

      tolerations: {}

      affinity: {}

      service:
        type: ClusterIP
        port: 8080

    wms:
      replicaCount: 1
      image:
        repository: geoservercloud/geoserver-cloud-wms
        tag: ''

      env: []

      podAnnotations: {}

      podSecurityContext:
        runAsUser: 630

      securityContext: {}

      resources:
        requests:
          memory: '400Mi'
          cpu: '100m'
        limits:
          memory: '800Mi'
      #        cpu: "300m"

      nodeSelector: {}

      tolerations: {}

      affinity: {}

      service:
        type: ClusterIP
        port: 8080

    wcs:
      replicaCount: 1
      image:
        repository: geoservercloud/geoserver-cloud-wcs
        tag: ''

      env: []

      podAnnotations: {}

      podSecurityContext:
        runAsUser: 630

      securityContext: {}

      resources:
        requests:
          memory: '400Mi'
          cpu: '100m'
        limits:
          memory: '800Mi'
      #        cpu: "300m"

      nodeSelector: {}

      tolerations: {}

      affinity: {}

      service:
        type: ClusterIP
        port: 8080
