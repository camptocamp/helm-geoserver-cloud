tolerations: []
podSecurityContext: {}
securityContext: {}

common-image-stuff: &common-image-stuff
  tag: '1.0.3'

service: &common-service-definition
  type: ClusterIP
  servicePort: 8080
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http

volumes: &common-volumes
  # this comes from the config initContainer
  vol-local-gscloud:
    emptyDir: {}
  # /tmp as emptyDir, required if running with readOnlyRootFilesystem=true
  tmp-empty-dir:
    emptyDir: {}

volumeMounts: &common-volume-mounts
  /etc/localconfig:
    name: vol-local-gscloud
  # /tmp as emptyDir, required if running with readOnlyRootFilesystem=true
  /tmp/:
    name: "tmp-empty-dir"

ports: &common-ports
  http:
    containerPort: 8080
    hostIP: 127.0.0.1
  health:
    containerPort: 8081
    hostIP: 127.0.0.1

resources: &common-resources
  requests:
    memory: 512Mi
    cpu: 0.1
  limits:
    memory: 4Gi
    cpu: 4.0

env: &common-env
  GEOSERVER_BASE_PATH:
    # NB: do not put a trailing '/' character
    value: "/geoserver-cloud"
  SPRING_PROFILES_ACTIVE:
    # this must be explicitly overridden with either
    # "standalone,jdbcconfig,kube" or "standalone,datadir,kube"
    value: not-set
  GWC_ENABLED:
    value: "true"
  JAVA_OPTS_DEFAULT:
    value: '-DALLOW_ENV_PARAMETRIZATION=true -XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80'
  JAVA_OPTS:
    order: 1
    value: '$(JAVA_OPTS_DEFAULT)'
  GEOTOOLS_HTTPCLIENT_PROXY_ENABLED:
    value: "false"
  APP_KUBERNETES_IO_INSTANCE:
    type: "downwardAPI"
    valueFrom:
      fieldRef:
        fieldPath: "metadata.labels['app.kubernetes.io/instance']"
  APP_KUBERNETES_IO_NAME:
    type: "downwardAPI"
    valueFrom:
      fieldRef:
        fieldPath: "metadata.labels['app.kubernetes.io/name']"
  APP_KUBERNETES_IO_COMPONENT:
    type: "downwardAPI"
    valueFrom:
      fieldRef:
        fieldPath: "metadata.labels['app.kubernetes.io/component']"
  TARGETS_WMS:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-wms:8080"
  TARGETS_WFS:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-wfs:8080"
  TARGETS_WPS:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-wps:8080"
  TARGETS_WCS:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-wcs:8080"
  TARGETS_GWC:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-gwc:8080"
  TARGETS_REST:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-rest:8080"
  TARGETS_WEBUI:
    order: 1
    value: "http://$(APP_KUBERNETES_IO_INSTANCE)-$(APP_KUBERNETES_IO_NAME)-webui:8080"

  # RABBITMQ_PASSWORD:
  #   type: secret
  #   name: rabbitmq-secret
  #   key: RABBITMQ_PASSWORD
  # GEOSERVER_ADMIN_USERNAME:
  #   type: secret
  #   name: secret-name
  #   key: my-key
  # GEOSERVER_ADMIN_PASSWORD:
  #   type: secret
  #   name: secret-name
  #   key: my-key

common-spring-container-stuff: &common-spring-container-stuff
  resources:
    <<: *common-resources
  ports:
    <<: *common-ports
  volumeMounts:
    <<: *common-volume-mounts
  env:
    <<: *common-env
  livenessProbe: &geoserver-spring-livenessProbe
    httpGet:
      path: /actuator/health/liveness
      port: health
    periodSeconds: 10
    failureThreshold: 10
    initialDelaySeconds: 30
  readinessProbe: &geoserver-spring-readinessProbe
    httpGet:
      path: /actuator/health/readiness
      port: health
    periodSeconds: 5

common-generic-stuff: &common-generic-stuff
  replicaCount: 1
  initContainers: {}
    #<<: *common-init-containers
  nodeSelector: {}
  affinity: {}

geoserver:
  securityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
  ingress:
    enabled: false
    # For example #
    # hostGroups:
    #   host1:
    #     tls:
    #       enabled: false
    #       secretName: 'my-tls-secret'
    #     hosts:
    #       - one.example.com
    #       - two.example.com
    #   host2:
    #     tls:
    #       enabled: true
    #       secretName: 'my-wildcard-tls-secret'
    #     hosts:
    #       - '*.example.com'

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: default
  services:
    gateway:
      enabled: true
      ingress:
        # NB: if .Values.gscloud.ingress.enabled=true put true here as well
        enabled: false
        path: /geoserver-cloud/
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-gateway
            sha: ''
    webui:
      enabled: true
      ingress:
        enabled: false
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-webui
            sha: ''
    rest:
      enabled: true
      ingress:
        enabled: false
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-rest
            sha: ''
    wfs:
      enabled: true
      ingress:
        enabled: false
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-wfs
            sha: ''
    wms:
      enabled: true
      ingress:
        enabled: false
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-wms
            sha: ''
    wcs:
      enabled: true
      ingress:
        enabled: false
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-wcs
            sha: ''
    gwc:
      enabled: true
      ingress:
        enabled: false
      <<: *common-generic-stuff
      service:
        <<: *common-service-definition
      volumes:
        <<: *common-volumes
      containers:
        spring:
          <<: *common-spring-container-stuff
          image:
            <<: *common-image-stuff
            repository: geoservercloud/geoserver-cloud-gwc
            sha: ''
